---
import type { GetStaticPaths, MarkdownInstance } from "astro";
import { getCollection } from "astro:content";
import { experimental_AstroContainer as AstroContainer } from 'astro/container';
import { TechCatalog } from "@/lib/data";
import Layout from "@/layouts/Layout.astro";
import { TechBadge } from "@/components/projects/tech-badge";
import { ProjectDocumentsTabs } from "@/components/projects/project-documents-tabs";
import { GitHubProjectButton, LiveProjectButton } from "@/components/projects/buttons";
import { DEFAULT_PROJECT_THUMBNAIL } from "@/image-urls";

export const getStaticPaths = ( async () => {
  const projectEntries = await getCollection('projects');
  return projectEntries.map((entry) => ({
    params: { slug: entry.data.id },
    props: { entry }
  }))
}) satisfies GetStaticPaths;

const allProjectDocuments = Object.values(import.meta.glob('../../content/project-documents/**/*.md', { eager: true })) as MarkdownInstance<Record<string, any>>[];

const { entry } = Astro.props;

const documents: Array<{ title: string; content: string }> = [];
const container = await AstroContainer.create();
for (const documentRef of entry.data.documents.filter((doc) => !doc.hidden)) {
  const document = allProjectDocuments.find(
    (d) => d.file.endsWith(documentRef.path)
  );
  if (!document) return;

  const documentHTML = await container.renderToString(document.Content);
  documents.push({
    title: documentRef.title,
    content: documentHTML,
  })
}
---

<Layout title={`${entry.data.title} | Buffington's Projects`}>
  <div class="max-w-4xl w-full px-4 sm:px-10 flex flex-col gap-4">
    <div class="pt-4 sm:pt-10 flex flex-col items-start space-y-0.5 sm:flex-row sm:items-center sm:space-x-10">
      <div class="sm:max-w-64 md:max-w-80">
        <img
          class="rounded-sm"
          src={entry.data.thumbnailImage ?? DEFAULT_PROJECT_THUMBNAIL}
        />
      </div>

      <div class="pl-1 sm:pl-0 pt-4 sm:pt-0 space-y-1">
        <h1 class="text-3xl font-semibold tracking-wide">{entry.data.title}</h1>
        <p class="text-base text-[#d3d3d4]">{entry.data.description}</p>
        <div class="pt-2 flex flex-row gap-3">
          {entry.data.live && <LiveProjectButton href={entry.data.live} />}
          {entry.data.github && <GitHubProjectButton href={entry.data.github} />}
        </div>
      </div>
    </div>
    
    <div class="pl-1 sm:pl-0 pt-2 flex flex-col items-start gap-y-1 sm:flex-row sm:items-center sm:gap-y-2">
      <span class="text-base font-semibold pr-1">
        Tech Stack:
      </span>
      <div class="flex flex-row flex-wrap gap-x-2 gap-y-1">
        {entry.data.techstack.map((tech) => (
          <TechBadge data={TechCatalog[tech]} active />
        ))}
      </div>
    </div>

    <div class="pt-4">
      <ProjectDocumentsTabs client:load documents={documents} />
    </div>
  </div>
</Layout>
